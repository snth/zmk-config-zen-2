/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define DFT      0
#define SYM_MOM  1
#define SYM_LCK  2
#define SYM      3
#define NUM_MOM  4
#define NUM_LCK  5
#define NUM      6
#define NAV_MOM  7
#define NAV_LCK  8
#define NAV      9
#define UTL      10

/ {
  chosen {
      zmk,physical-layout = &foostan_corne_6col_layout;
      // zmk,physical-layout = &foostan_corne_5col_layout;
  };
};

/ {
conditional_layers {
    compatible = "zmk,conditional-layers";
    nav_mom {
        if-layers = <NAV_MOM>;
        then-layer = <NAV>;
    };
    nav_lck {
        if-layers = <NAV_LCK>;
        then-layer = <NAV>;
    };
    num_mom {
        if-layers = <NUM_MOM>;
        then-layer = <NUM>;
    };
    num_lck {
        if-layers = <NUM_LCK>;
        then-layer = <NUM>;
    };
    sym_mom {
        if-layers = <SYM_MOM>;
        then-layer = <SYM>;
    };
    sym_lck {
        if-layers = <SYM_LCK>;
        then-layer = <SYM>;
    };
};

behaviors {

  /* old-style HRMs */
  hm: homerow_mods {
        compatible = "zmk,behavior-hold-tap";
        label = "HOMEROW_MODS";
        #binding-cells = <2>;
        tapping_term_ms = <200>;
        flavor = "tap-preferred";
        bindings = <&kp>, <&kp>;
  };

  /* left-hand HRMs */
  hml: homerow_mods_lhs {
      compatible = "zmk,behavior-hold-tap";
      label = "HOMEROW_MODS_LHS";
      #binding-cells = <2>;
      tapping-term-ms = <280>;
      quick-tap-ms = <175>;                // repeat on tap-into-hold
      flavor = "balanced";
      bindings = <&kp>, <&kp>;
      require-prior-idle-ms = <150>;
      hold-trigger-key-positions = <5 6 7 8 9  15 16 17 18 19  25 26 27 28 29  33 34 35>;
      hold-trigger-on-release;             // delay positional check until key-release
  };

  /* right-hand HRMs */
  hmr: homerow_mods_rhs {
      compatible = "zmk,behavior-hold-tap";
      label = "HOMEROW_MODS_RHS";
      #binding-cells = <2>;
      tapping-term-ms = <280>;
      quick-tap-ms = <175>;                // repeat on tap-into-hold
      flavor = "balanced";
      bindings = <&kp>, <&kp>;
      require-prior-idle-ms = <150>;
      hold-trigger-key-positions = <0 1 2 3 4  10 11 12 13 14  20 21 22 23 24  30 31 32>;
      hold-trigger-on-release;             // delay positional check until key-release
  };

  td_caps_shft: shift_tap_dance {
      compatible = "zmk,behavior-tap-dance";
      #binding-cells = <0>;
      tapping-term-ms = <200>;
      bindings = <&sk LSHFT>, <&caps_word>, <&kp CAPSLOCK>;
  };
  mt_caps_shft: modtap_caps_shift_tap_dance {
      compatible = "zmk,behavior-hold-tap";
      label = "modtap_caps_shift_tap_dance";
      #binding-cells = <2>;
      flavor = "tap-preferred";
      tapping-term-ms = <200>;
      quick-tap-ms = <175>;
      bindings = <&kp>, <&td_caps_shft>;
  };
  td_caps_spc:  space_tap_dance {
      compatible = "zmk,behavior-tap-dance";
      #binding-cells = <0>;
      tapping-term-ms = <200>;
      bindings = <&kp SPACE>, <&caps_word>, <&kp SPACE>;
  };
  lt_caps_spc: layertap_capsword_space_tap_dance {
      compatible = "zmk,behavior-hold-tap";
      label = "layertap_capsword_space_tap_dance";
      #binding-cells = <2>;
      flavor = "tap-preferred";
      tapping-term-ms = <200>;
      quick-tap-ms = <175>;
      bindings = <&mo>, <&td_caps_spc>;
  };
  mt_caps_spc: modtap_caps_space_tap_dance {
      compatible = "zmk,behavior-hold-tap";
      label = "modtap_caps_space_tap_dance";
      #binding-cells = <2>;
      flavor = "tap-preferred";
      tapping-term-ms = <200>;
      quick-tap-ms = <175>;
      bindings = <&kp>, <&td_caps_spc>;
  };

  APOS_O: apos_only {
      compatible = "zmk,behavior-mod-morph";
      #binding-cells = <0>;
      bindings = <&kp APOS>, <&kp APOS>;
      mods = <(MOD_LSFT|MOD_RSFT)>;
  };
  GRAVE_O: grave_only {
      compatible = "zmk,behavior-mod-morph";
      #binding-cells = <0>;
      bindings = <&kp GRAVE>, <&kp GRAVE>;
      mods = <(MOD_LSFT|MOD_RSFT)>;
  };
  SEMI_O: semi_only {
      compatible = "zmk,behavior-mod-morph";
      #binding-cells = <0>;
      bindings = <&kp SEMI>, <&kp SEMI>;
      mods = <(MOD_LSFT|MOD_RSFT)>;
  };
  BSLH_O: bslh_only {
      compatible = "zmk,behavior-mod-morph";
      #binding-cells = <0>;
      bindings = <&kp BSLH>, <&kp BSLH>;
      mods = <(MOD_LSFT|MOD_RSFT)>;
  };
  SLASH_O: slash_only {
      compatible = "zmk,behavior-mod-morph";
      #binding-cells = <0>;
      bindings = <&kp SLASH>, <&kp SLASH>;
      mods = <(MOD_LSFT|MOD_RSFT)>;
  };
  DOT_O: dot_only {
      compatible = "zmk,behavior-mod-morph";
      #binding-cells = <0>;
      bindings = <&kp DOT>, <&kp DOT>;
      mods = <(MOD_LSFT|MOD_RSFT)>;
  };
  COMMA_O: comma_only {
      compatible = "zmk,behavior-mod-morph";
      #binding-cells = <0>;
      bindings = <&kp COMMA>, <&kp COMMA>;
      mods = <(MOD_LSFT|MOD_RSFT)>;
  };

  combos {
    compatible = "zmk,combos";
  
  // ---------------------------- Combos ----------------------------
  // |#####|  %  |  #  |  !  |  ?  |  *  |  ^  |  @  |  $  |#####|
  //    7     5     3     1     9     8     0     2     4     6
  // |#####|     |  _  |     | DEL | BSPC|  :  |  -  |  ;  |#####|
  //    (     [     ]     )     ~    LCK    \     :     >     <
  // |#####|  {  |  }  |  "  |  `  |  &  |  =  |  >  |  <  |#####|
  

    // LHS Combos
    // ----------------------------------------------------------------------------------------------------------------------------

    // LHS Vertical 2-key combos
    combo2_7_vert {
        timeout-ms = <50>;
        key-positions = <0 10>;
        bindings = <&kp N7>;
        layers = <DFT NAV NUM SYM>;
    };
    combo2_5_vert {
        timeout-ms = <50>;
        key-positions = <1 11>;
        bindings = <&kp N5>;
        layers = <DFT NAV NUM SYM>;
    };
    combo2_3_vert {
        timeout-ms = <50>;
        key-positions = <2 12>;
        bindings = <&kp N3>;
        layers = <DFT NAV NUM SYM>;
    };
    combo2_1_vert {
        timeout-ms = <50>;
        key-positions = <3 13>;
        bindings = <&kp N1>;
        layers = <DFT NAV NUM SYM>;
    };
    combo2_9_vert {
        timeout-ms = <50>;
        key-positions = <4 14>;
        bindings = <&kp N9>;
        layers = <DFT NAV NUM SYM>;
    };

    combo2_lpar_vert {
        timeout-ms = <50>;
        key-positions = <10 20>;
        bindings = <&kp LPAR>;
        layers = <DFT NAV NUM SYM>;
    };
    combo2_lbkt_vert {
        timeout-ms = <50>;
        key-positions = <11 21>;
        bindings = <&kp LBKT>;
        layers = <DFT NAV NUM SYM>;
    };
    combo2_rbkt_vert {
        timeout-ms = <50>;
        key-positions = <12 22>;
        bindings = <&kp RBKT>;
        layers = <DFT NAV NUM SYM>;
    };
    combo2_rpar_vert {
        timeout-ms = <50>;
        key-positions = <13 23>;
        bindings = <&kp RPAR>;
        layers = <DFT NAV NUM SYM>;
    };
    combo2_tilde_vert {
        timeout-ms = <50>;
        key-positions = <14 24>;
        bindings = <&kp TILDE>;
        layers = <DFT NAV NUM SYM>;
    };

    // LHS 2-key combos
    combo2_percent {
        timeout-ms = <50>;
        key-positions = <0 1>;
        bindings = <&kp PERCENT>;
        layers = <DFT NAV NUM SYM>;
    };
    combo2_hash {
        timeout-ms = <50>;
        key-positions = <1 2>;
        bindings = <&kp HASH>;
        layers = <DFT NAV NUM SYM>;
    };
    combo2_excl {
        timeout-ms = <50>;
        key-positions = <2 3>;
        bindings = <&kp EXCL>;
        layers = <DFT NAV NUM SYM>;
    };
    combo2_qmark {
        timeout-ms = <50>;
        key-positions = <3 4>;
        bindings = <&kp QMARK>;
        layers = <DFT NAV NUM SYM>;
    };

    combo2_underscore {
        timeout-ms = <50>;
        key-positions = <11 12>;
        bindings = <&kp UNDERSCORE>;
        layers = <DFT NAV NUM SYM>;
    };
    combo2_del {
        timeout-ms = <50>;
        key-positions = <13 14>;
        bindings = <&kp DEL>;
        layers = <DFT NAV NUM SYM>;
    };

    combo2_dqt_diag {
        timeout-ms = <50>;
        key-positions = <12 23>;
        bindings = <&kp DQT>;
        layers = <DFT NAV NUM SYM>;
    };

    combo2_lbrc {
        timeout-ms = <50>;
        key-positions = <20 21>;
        bindings = <&kp LBRC>;
        layers = <DFT NAV NUM SYM>;
    };
    combo2_rbrc {
        timeout-ms = <50>;
        key-positions = <21 22>;
        bindings = <&kp RBRC>;
        layers = <DFT NAV NUM SYM>;
    };
    combo2_dqt {
        timeout-ms = <50>;
        key-positions = <22 23>;
        bindings = <&kp DQT>;
        layers = <DFT NAV NUM SYM>;
    };
    combo2_grave {
        timeout-ms = <50>;
        key-positions = <23 24>;
        bindings = <&GRAVE_O>;
        layers = <DFT NAV NUM SYM>;
    };


    // LHS 3-key combos
    combo3_mute {
        timeout-ms = <50>;
        key-positions = <0 1 2>;
        bindings = <&kp C_MUTE>;
        layers = <DFT NAV NUM SYM>;
    };
    combo3_numword {
        timeout-ms = <50>;
        key-positions = <1 2 3>;
        bindings = <&tog NUM_LCK>;
        layers = <DFT NAV NUM SYM>;
    };
    combo3_play {
        timeout-ms = <50>;
        key-positions = <2 3 4>;
        bindings = <&kp C_PP>;
        layers = <DFT NAV NUM SYM>;
    };
    
    combo3_prev_desktop {
        timeout-ms = <50>;
        key-positions = <10 11 12>;
        bindings = <&kp LC(LG(LEFT))>;
        layers = <DFT NAV NUM SYM>;
    };
    combo3_next_desktop {
        timeout-ms = <50>;
        key-positions = <11 12 13>;
        bindings = <&kp LC(LG(RIGHT))>;
        layers = <DFT NAV NUM SYM>;
    };
    combo3_pgup_lhs {
        timeout-ms = <50>;
        key-positions = <12 13 14>;
        bindings = <&kp PGUP>;
        layers = <DFT NAV NUM SYM>;
    };
    
    combo3_up_lhs {
        timeout-ms = <50>;
        key-positions = <20 21 22>;
        bindings = <&kp UP>;
        layers = <DFT NAV NUM SYM>;
    };
    combo3_down_lhs {
        timeout-ms = <50>;
        key-positions = <21 22 23>;
        bindings = <&kp DOWN>;
        layers = <DFT NAV NUM SYM>;
    };
    combo3_pgdn_lhs {
        timeout-ms = <50>;
        key-positions = <22 23 24>;
        bindings = <&kp PGDN>;
        layers = <DFT NAV NUM SYM>;
    };

    // LHS 4-key combos
    combo4_toggle_nav_lock {
        timeout-ms = <50>;
        key-positions = <0 1 2 3>;
        bindings = <&tog NAV_LCK>;
        layers = <DFT NAV NUM SYM>;
    };
    combo4_toggle_num_lock {
        timeout-ms = <50>;
        key-positions = <1 2 3 4>;
        bindings = <&tog NUM_LCK>;
        layers = <DFT NAV NUM SYM>;
    };

    combo4_esc {
        timeout-ms = <50>;
        key-positions = <10 11 12 13>;
        bindings = <&kp ESC>;
        layers = <DFT NAV NUM SYM>;
    };
    combo4_pgup_lhs {
        timeout-ms = <50>;
        key-positions = <11 12 13 14>;
        bindings = <&kp PGUP>;
        layers = <DFT NAV NUM SYM>;
    };

    combo4_enter {
        timeout-ms = <50>;
        key-positions = <20 21 22 23>;
        bindings = <&kp ENTER>;
        layers = <DFT NAV NUM SYM>;
    };
    combo4_pgdn_lhs {
        timeout-ms = <50>;
        key-positions = <21 22 23 24>;
        bindings = <&kp PGDN>;
        layers = <DFT NAV NUM SYM>;
    };

    // RHS Combos
    // ----------------------------------------------------------------------------------------------------------------------------

    // RHS vertical combos    
    combo2_8_vert {
        timeout-ms = <50>;
        key-positions = <5 15>;
        bindings = <&kp N8>;
        layers = <DFT NAV NUM SYM>;
    };
    combo2_0_vert {
        timeout-ms = <50>;
        key-positions = <6 16>;
        bindings = <&kp N0>;
        layers = <DFT NAV NUM SYM>;
    };
    combo2_2_vert {
        timeout-ms = <50>;
        key-positions = <7 17>;
        bindings = <&kp N2>;
        layers = <DFT NAV NUM SYM>;
    };
    combo2_4_vert {
        timeout-ms = <50>;
        key-positions = <8 18>;
        bindings = <&kp N4>;
        layers = <DFT NAV NUM SYM>;
    };
    combo2_6_vert {
        timeout-ms = <50>;
        key-positions = <9 19>;
        bindings = <&kp N6>;
        layers = <DFT NAV NUM SYM>;
    };

    combo2_pipe_vert {
        timeout-ms = <50>;
        key-positions = <15 25>;
        bindings = <&kp PIPE>;
        layers = <DFT NAV NUM SYM>;
    };
    combo2_bslh_vert {
        timeout-ms = <50>;
        key-positions = <16 26>;
        bindings = <&kp BSLH>;
        layers = <DFT NAV NUM SYM>;
    };
    combo2_colon_vert {
        timeout-ms = <50>;
        key-positions = <17 27>;
        bindings = <&kp COLON>;
        layers = <DFT NAV NUM SYM>;
    };
    combo2_gt_vert {
        timeout-ms = <50>;
        key-positions = <18 28>;
        bindings = <&kp GT>;
        layers = <DFT NAV NUM SYM>;
    };
    combo2_lt_vert {
        timeout-ms = <50>;
        key-positions = <19 29>;
        bindings = <&kp LT>;
        layers = <DFT NAV NUM SYM>;
    };

    // RHS 2-key combos    
    combo2_star {
        timeout-ms = <50>;
        key-positions = <5 6>;
        bindings = <&kp STAR>;
        layers = <DFT NAV NUM SYM>;
    };
    combo2_caret {
        timeout-ms = <50>;
        key-positions = <6 7>;
        bindings = <&kp CARET>;
        layers = <DFT NAV NUM SYM>;
    };
    combo2_at {
        timeout-ms = <50>;
        key-positions = <7 8>;
        bindings = <&kp AT_SIGN>;
        layers = <DFT NAV NUM SYM>;
    };
    combo2_dollar {
        timeout-ms = <50>;
        key-positions = <8 9>;
        bindings = <&kp DOLLAR>;
        layers = <DFT NAV NUM SYM>;
    };

    combo2_bspc {
        timeout-ms = <50>;
        key-positions = <15 16>;
        bindings = <&kp BSPC>;
        layers = <DFT NAV NUM SYM>;
    };
    combo2_colon {
        timeout-ms = <50>;
        key-positions = <16 17>;
        bindings = <&kp COLON>;
        layers = <DFT NAV NUM SYM>;
    };
    combo2_minus {
        timeout-ms = <50>;
        key-positions = <17 18>;
        bindings = <&kp MINUS>;
        layers = <DFT NAV NUM SYM>;
    };
    combo2_semi {
        timeout-ms = <50>;
        key-positions = <18 19>;
        bindings = <&kp SEMI>;
        layers = <DFT NAV NUM SYM>;
    };

    combo2_ampersand {
        timeout-ms = <50>;
        key-positions = <25 26>;
        bindings = <&kp AMPERSAND>;
        layers = <DFT NAV NUM SYM>;
    };
    combo2_equal {
        timeout-ms = <50>;
        key-positions = <26 27>;
        bindings = <&kp EQUAL>;
        layers = <DFT NAV NUM SYM>;
    };
    combo2_gt {
        timeout-ms = <50>;
        key-positions = <27 28>;
        bindings = <&kp GT>;
        layers = <DFT NAV NUM SYM>;
    };
    combo2_lt {
        timeout-ms = <50>;
        key-positions = <28 29>;
        bindings = <&kp LT>;
        layers = <DFT NAV NUM SYM>;
    };


    // RHS 3-key combos
    combo3_lock_screen {
        timeout-ms = <50>;
        key-positions = <5 6 7>;
        bindings = <&kp LG(L)>;
        layers = <DFT NAV NUM SYM>;
    };
    combo3_capsword_rhs {
        timeout-ms = <50>;
        key-positions = <6 7 8>;
        bindings = <&caps_word>;
        layers = <DFT NAV NUM SYM>;
    };
    combo3_task_manager {
        timeout-ms = <50>;
        key-positions = <7 8 9>;
        bindings = <&kp LC(LS(ESC))>;
        layers = <DFT NAV NUM SYM>;
    };  
    
    combo3_pgup_rhs {
        timeout-ms = <50>;
        key-positions = <15 16 17>;
        bindings = <&kp PGUP>;
        layers = <DFT NAV NUM SYM>;
    };
    combo3_home_rhs {
        timeout-ms = <50>;
        key-positions = <16 17 18>;
        bindings = <&kp HOME>;
        layers = <DFT NAV NUM SYM>;
    };
    combo3_end_rhs {
        timeout-ms = <50>;
        key-positions = <17 18 19>;
        bindings = <&kp END>;
        layers = <DFT NAV NUM SYM>;
    };
    
    combo3_pgdn_rhs {
        timeout-ms = <50>;
        key-positions = <25 26 27>;
        bindings = <&kp PGDN>;
        layers = <DFT NAV NUM SYM>;
    };
    combo3_left_rhs {
        timeout-ms = <50>;
        key-positions = <26 27 28>;
        bindings = <&kp LEFT>;
        layers = <DFT NAV NUM SYM>;
    };
    combo3_right_rhs {
        timeout-ms = <50>;
        key-positions = <27 28 29>;
        bindings = <&kp RIGHT>;
        layers = <DFT NAV NUM SYM>;
    };

    // RHS 4-key combos
    
    combo4_toggle_sym_lock {
        timeout-ms = <50>;
        key-positions = <5 6 7 8>;
        bindings = <&tog SYM_LCK>;
        layers = <DFT NAV NUM SYM>;
    };  
    combo4_capslock_rhs {
        timeout-ms = <50>;
        key-positions = <6 7 8 9>;
        bindings = <&kp CAPSLOCK>;
        layers = <DFT NAV NUM SYM>;
    };

    combo4_restore_default_layer {
        timeout-ms = <50>;
        key-positions = <15 16 17 18>;
        bindings = <&to DFT>;
        layers = <DFT NAV NUM SYM>;
    };  
    combo4_app_rhs {
        timeout-ms = <50>;
        key-positions = <16 17 18 19>;
        bindings = <&kp K_APP>;
        layers = <DFT NAV NUM SYM>;
    };

    combo4_pgup_rhs {
        timeout-ms = <50>;
        key-positions = <25 26 27 28>;
        bindings = <&kp PGUP>;
        layers = <DFT NAV NUM SYM>;
    };
    combo4_pgdn_rhs {
        timeout-ms = <50>;
        key-positions = <26 27 28 29>;
        bindings = <&kp PGDN>;
        layers = <DFT NAV NUM SYM>;
    };

  };

};

        keymap {
                compatible = "zmk,keymap";

                default_layer {
                        label = "COLEDUST";
// -----------------------------------------------------------------------------------------
// |  Q  |  W  |  F  |   P    |  B    |    J  |   L   |  U  |  Y  |  Z  |
// |  A  |  R  |  S  |   T    |  G    |    M  |   N   |  E  |  I  |  O  |
// |  '  |  X  |  C  |   D    |  V    |    K  |   H   |  /  |  .  |  ,  |
//             |LSHFT|NAV/BSPC|SYM/TAB|NUM/ENT|  SPC  |RSHFT|
                        bindings = <
   &kp  Q       &kp  W           &kp F             &kp P           &kp B               &kp J         &kp  L            &kp  U                 &kp  Y         &kp  Z
   &hml LALT A  &hml LGUI R      &hml LSHFT S      &hml LCTRL T    &kp G               &kp M         &hmr RCTRL N      &hmr RSHFT E           &hmr RGUI I    &hmr RALT O
   &APOS_O      &kp X            &kp C             &lt NAV_MOM D   &kp V               &kp K         &kp H             &kp SLASH              &kp DOT        &kp COMMA
                &kp LSHFT        &lt NAV_MOM BSPC  &lt SYM_MOM TAB                                   &lt NUM_MOM ENTER &kp SPC                &kp RSHFT
                        >;
                };

                sym_mom_layer {
                        label = "SYM_MOM";
                        bindings = <
   &trans         &trans         &trans            &trans          &trans              &trans        &trans            &trans                 &trans         &trans
   &trans         &trans         &trans            &trans          &trans              &trans        &trans            &trans                 &trans         &trans
   &trans         &trans         &trans            &trans          &trans              &trans        &trans            &trans                 &trans         &trans
                  &trans         &trans            &trans                                            &trans            &trans                 &trans
                        >;
                };

                sym_lck_layer {
                        label = "SYM_LCK";
                        bindings = <
   &trans         &trans         &trans            &trans          &trans              &trans        &trans            &trans                 &trans         &trans
   &trans         &trans         &trans            &trans          &trans              &trans        &trans            &trans                 &trans         &trans
   &trans         &trans         &trans            &trans          &trans              &trans        &trans            &trans                 &trans         &trans
                  &trans         &trans            &trans                                            &trans            &trans                 &trans
                        >;
                };

                sym_layer {
                        label = "SYM";
// --------------------------- SYM Layer ---------------------------
// |  &  |  %  |  #  |  !  |  ?  |  *  |  +  |  @  |  $  |  ^  |
// |  (  |  [  |  ]  |  )  | DEL | BSPC|  \  |  :  |  -  |  ;  |
// |  '  |  {  |  }  |  "  |  `  |  &  |  =  |  /  |  .  |  ,  |
//             |     | SPC |     |     | SPC |     |
                        bindings = <
   &kp  AMPERSAND &kp  PERCENT   &kp  HASH         &kp  EXCL       &kp QMARK           &kp STAR      &kp  PLUS         &kp  AT_SIGN           &kp  DOLLAR     &kp  CARET
   &hml LALT LPAR &hml LGUI LBKT &hml LSHFT RBKT   &hml LCTRL RPAR &kp DEL             &kp BSPC      &hmr RCTRL BSLH   &hmr RSHFT COLON       &hmr RGUI MINUS &hmr RALT SEMI
   &trans         &kp LBRC       &kp RBRC          &lt NAV_MOM DQT &kp GRAVE           &kp AMPERSAND &kp  EQUAL        &trans                 &trans          &trans
                  &trans         &kp SPACE         &trans                                            &trans            &kp SPACE              &trans
                        >;
                };

                num_mom_layer {
                        label = "NUM_MOM";
                        bindings = <
   &trans         &trans         &trans            &trans          &trans              &trans        &trans            &trans                 &trans          &trans
   &trans         &trans         &trans            &trans          &trans              &trans        &trans            &trans                 &trans          &trans
   &trans         &trans         &trans            &trans          &trans              &trans        &trans            &trans                 &trans          &trans
                  &trans         &trans            &trans                                            &trans            &trans                 &trans
                        >;
                };

                num_lck_layer {
                        label = "NUM_LCK";
                        bindings = <
   &trans         &trans         &trans            &trans          &trans              &trans        &trans            &trans                 &trans          &trans
   &trans         &trans         &trans            &trans          &trans              &trans        &trans            &trans                 &trans          &trans
   &trans         &trans         &trans            &trans          &trans              &trans        &trans            &trans                 &trans          &trans
                  &trans         &trans            &trans                                            &trans            &trans                 &trans
                        >;
                };

                num_layer {
                        label = "NUM";
// -----------------------------------------------------------------------------------------
// |  7  |  5  |  3  |  1  |  9  |  8  |  0  |  2  |  4  |  6  |
// |  (  |  [  |  ]  |  )  | DEL | BSPC|  \  |  :  |  -  |  ;  |
// |  '  |  {  |  }  |  "  |  `  |  &  |  =  |  /  |  .  |  ,  |
//             |     | SPC |     |     | SPC |     |
                        bindings = <
   &kp N7         &kp  N5        &kp  N3           &kp  N1         &kp N9              &kp N8        &kp N0            &kp  N2                &kp  N4         &kp  N6
   &hml LALT LPAR &hml LGUI LBKT &hml LSHFT RBKT   &hml LCTRL RPAR &kp DEL             &kp BSPC      &hmr RCTRL BSLH   &hmr RSHFT COLON       &hmr RGUI MINUS &hmr RALT SEMI
   &trans         &kp LBRC       &kp RBRC          &lt NAV_MOM DQT &kp GRAVE           &kp AMPERSAND &kp  EQUAL        &trans                 &trans          &trans
                  &trans         &kp SPACE         &trans                                            &trans            &kp SPACE              &trans
                          >;
                };

                nav_mom_layer {
                        label = "NAV_MOM";
                        bindings = <
   &trans         &trans         &trans            &trans          &trans              &trans        &trans            &trans                 &trans         &trans
   &trans         &trans         &trans            &trans          &trans              &trans        &trans            &trans                 &trans         &trans
   &trans         &trans         &trans            &trans          &trans              &trans        &trans            &trans                 &trans         &trans
                  &trans         &trans            &trans                                            &trans            &trans                 &trans
                        >;
                };

                nav_lck_layer {
                        label = "NAV_LCK";
                        bindings = <
   &trans         &trans         &trans            &trans          &trans              &trans        &trans            &trans                 &trans         &trans
   &trans         &trans         &trans            &trans          &trans              &trans        &trans            &trans                 &trans         &trans
   &trans         &trans         &trans            &trans          &trans              &trans        &trans            &trans                 &trans         &trans
                  &trans         &trans            &trans                                            &trans            &trans                 &trans
                        >;
                };

                nav_layer {
                        label = "NAV";
// -----------------------------------------------------------------------------------------
// | HOME| PGUP| PGDN| END | F11   |   F12 |  HOME | PGUP | PGDN | END  |
// | INS | RET | TAB | ESC | DEL   |  BSPC |  LEFT |  UP  | DOWN | RIGHT|
// | UNDO| CUT | COPY|PASTE|PASTE  | CTRL-K|    =  |      |      |      |
//             |     | SPC |       |       |UTL/SPC|      |
                        bindings = <
   &kp HOME       &kp  PG_UP     &kp  PG_DN        &kp  END        &kp F11             &kp F12       &kp HOME          &kp PG_UP              &kp PG_DN      &kp  END
   &hm LALT INS   &hm  LGUI RET  &hm  LSHFT TAB    &hm  LCTRL ESC  &kp DEL             &kp BSPC      &kp LEFT          &kp UP                 &kp DOWN       &kp RIGHT
   &kp LC(Z)      &kp  LC(X)     &kp  LC(C)        &kp  LC(V)      &kp LC(V)           &kp LC(K)     &kp EQUAL         &trans                 &trans         &trans
                  &trans         &kp SPACE         &trans                                            &trans            &lt UTL SPACE          &trans
                        >;
                };

                utl_layer {
                        label = "UTL";
// -----------------------------------------------------------------------------------------
// | MUTE| PREV| NEXT| PLAY | F11 |  F12 | LOCK |VOL_UP|VOL_DN|CPSLCK|
// | F7  | F5  | F3  | F1   | F9  |  F8  |  F10 |  F2  |  F4  |  F6  |
// | BACK| DOWN| UP  | FWD  | ??? | BTCLR|  BT0 |  BT1 |  BT2 |  BT3 |
//             |     |      |     |      |      |      |
                        bindings = <
   &kp  C_MUTE    &kp  C_PREV       &kp  C_NEXT     &kp  C_PP      &kp F11             &kp F12       &kp  LG(L)        &kp  C_VOL_UP          &kp  C_VOL_DN  &kp  CAPSLOCK
   &hml LALT F7   &hml LGUI F5      &hml LSHFT F3   &hml LCTRL F1  &lt NAV_MOM F9      &kp F8        &hmr RCTRL F10    &hmr RSHFT F2          &hmr RGUI F4   &hmr RALT F6
   &kp  K_BACK    &kp K_SCROLL_DOWN &kp K_SCROLL_UP &kp K_FORWARD  &kp C_AC_SEARCH     &bt BT_CLR    &bt  BT_SEL 0     &bt  BT_SEL 1          &bt  BT_SEL 2  &bt  BT_SEL 3
                  &trans            &trans          &trans                                           &trans            &trans                 &trans
                        >;
                };
                
    };
};
