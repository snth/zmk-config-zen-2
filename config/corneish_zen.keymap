#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

/ {
  chosen {
      zmk,physical-layout = &foostan_corne_6col_layout;
      // zmk,physical-layout = &foostan_corne_5col_layout;
  };
};

/ {

behaviors {
  hm: homerow_mods {
        compatible = "zmk,behavior-hold-tap";
        label = "HOMEROW_MODS";
        #binding-cells = <2>;
        tapping_term_ms = <200>;
        flavor = "tap-preferred";
        bindings = <&kp>, <&kp>;
  };

  combos {
    compatible = "zmk,combos";
      
    // LHS 2-key combos
    combo2_percent {
        timeout-ms = <50>;
        key-positions = <0 1>;
        bindings = <&kp PERCENT>;
        layers = <0 1 2 3>;
    };
    combo2_hash {
        timeout-ms = <50>;
        key-positions = <1 2>;
        bindings = <&kp HASH>;
        layers = <0 1 2 3>;
    };
    combo2_excl {
        timeout-ms = <50>;
        key-positions = <2 3>;
        bindings = <&kp EXCL>;
        layers = <0 1 2 3>;
    };
    combo2_one {
        timeout-ms = <50>;
        key-positions = <3 4>;
        bindings = <&kp N1>;
        layers = <0 1 2 3>;
    };
  
    combo2_underscore {
        timeout-ms = <50>;
        key-positions = <11 12>;
        bindings = <&kp UNDERSCORE>;
        layers = <0 1 2 3>;
    };
    combo2_dqt {
        timeout-ms = <50>;
        key-positions = <12 13>;
        bindings = <&kp DQT>;
        layers = <0 1 2 3>;
    };
    combo2_tilde {
        timeout-ms = <50>;
        key-positions = <13 14>;
        bindings = <&kp TILDE>;
        layers = <0 1 2 3>;
    };

    combo2_ampersand {
        timeout-ms = <50>;
        key-positions = <21 22>;
        bindings = <&kp AMPERSAND>;
        layers = <0 1 2 3>;
    };
    combo2_pipe {
        timeout-ms = <50>;
        key-positions = <22 23>;
        bindings = <&kp PIPE>;
        layers = <0 1 2 3>;
    };
    combo2_grave {
        timeout-ms = <50>;
        key-positions = <23 24>;
        bindings = <&kp GRAVE>;
        layers = <0 1 2 3>;
    };
    
    // LHS 3-key combos
    combo3_mute {
        timeout-ms = <50>;
        key-positions = <0 1 2>;
        bindings = <&kp C_MUTE>;
        layers = <0 1 2 3>;
    };
    combo3_play {
        timeout-ms = <50>;
        key-positions = <1 2 3>;
        bindings = <&kp C_PP>;
        layers = <0 1 2 3>;
    };
    combo3_enter {
        timeout-ms = <50>;
        key-positions = <2 3 4>;
        bindings = <&kp ENTER>;
        layers = <0 1 2 3>;
    };  
    
    combo3_lpar {
        timeout-ms = <50>;
        key-positions = <10 11 12>;
        bindings = <&kp LPAR>;
        layers = <0 1 2 3>;
    };
    combo3_rpar {
        timeout-ms = <50>;
        key-positions = <11 12 13>;
        bindings = <&kp RPAR>;
        layers = <0 1 2 3>;
    };
    combo3_del {
        timeout-ms = <50>;
        key-positions = <12 13 14>;
        bindings = <&kp DEL>;
        layers = <0 1 2 3>;
    };
    
    combo3_lt {
        timeout-ms = <50>;
        key-positions = <20 21 22>;
        bindings = <&kp LT>;
        layers = <0 1 2 3>;
    };
    combo3_gt {
        timeout-ms = <50>;
        key-positions = <21 22 23>;
        bindings = <&kp GT>;
        layers = <0 1 2 3>;
    };
    combo3_tilde {
        timeout-ms = <50>;
        key-positions = <22 23 24>;
        bindings = <&kp TILDE>;
        layers = <0 1 2 3>;
    };

    // LHS 4-key combos
    combo4_left {
        timeout-ms = <50>;
        key-positions = <0 1 2 3>;
        bindings = <&kp LEFT>;
        layers = <0 1 2 3>;
    };
    combo4_right {
        timeout-ms = <50>;
        key-positions = <1 2 3 4>;
        bindings = <&kp RIGHT>;
        layers = <0 1 2 3>;
    };

    combo4_esc {
        timeout-ms = <50>;
        key-positions = <10 11 12 13>;
        bindings = <&kp ESC>;
        layers = <0 1 2 3>;
    };
    combo4_enter {
        timeout-ms = <50>;
        key-positions = <11 12 13 14>;
        bindings = <&kp ENTER>;
        layers = <0 1 2 3>;
    };

    combo4_shifttab {
        timeout-ms = <50>;
        key-positions = <20 21 22 23>;
        bindings = <&kp LS(TAB)>;
        layers = <0 1 2 3>;
    };
    combo4_shiftenter {
        timeout-ms = <50>;
        key-positions = <21 22 23 24>;
        bindings = <&kp LS(ENTER)>;
        layers = <0 1 2 3>;
    };

    // RHS Combos
    // -------------------------------

    // RHS 2-key combos    
    combo2_zero {
        timeout-ms = <50>;
        key-positions = <5 6>;
        bindings = <&kp N0>;
        layers = <0 1 2 3>;
    };
    combo2_question {
        timeout-ms = <50>;
        key-positions = <6 7>;
        bindings = <&kp QUESTION>;
        layers = <0 1 2 3>;
    };
    combo2_at {
        timeout-ms = <50>;
        key-positions = <7 8>;
        bindings = <&kp AT_SIGN>;
        layers = <0 1 2 3>;
    };
    combo2_dollar {
        timeout-ms = <50>;
        key-positions = <8 9>;
        bindings = <&kp DOLLAR>;
        layers = <0 1 2 3>;
    };

    combo2_semi_rhs {
        timeout-ms = <50>;
        key-positions = <15 16>;
        bindings = <&kp SEMI>;
        layers = <0 1 2 3>;
    };
    combo2_colon {
        timeout-ms = <50>;
        key-positions = <16 17>;
        bindings = <&kp COLON>;
        layers = <0 1 2 3>;
    };
    combo2_minus {
        timeout-ms = <50>;
        key-positions = <17 18>;
        bindings = <&kp MINUS>;
        layers = <0 1 2 3>;
    };

    combo2_bslh {
        timeout-ms = <50>;
        key-positions = <25 26>;
        bindings = <&kp BSLH>;
        layers = <0 1 2 3>;
    };
    combo2_equal {
        timeout-ms = <50>;
        key-positions = <26 27>;
        bindings = <&kp EQUAL>;
        layers = <0 1 2 3>;
    };
    combo2_plus {
        timeout-ms = <50>;
        key-positions = <27 28>;
        bindings = <&kp PLUS>;
        layers = <0 1 2 3>;
    };

    // RHS 3-key combos
    combo3_star {
        timeout-ms = <50>;
        key-positions = <5 6 7>;
        bindings = <&kp STAR>;
        layers = <0 1 2 3>;
    };
    combo3_caret {
        timeout-ms = <50>;
        key-positions = <6 7 8>;
        bindings = <&kp CARET>;
        layers = <0 1 2 3>;
    };
    combo3_dollar {
        timeout-ms = <50>;
        key-positions = <7 8 9>;
        bindings = <&kp DOLLAR>;
        layers = <0 1 2 3>;
    };
    
    combo3_bspc {
        timeout-ms = <50>;
        key-positions = <15 16 17>;
        bindings = <&kp BSPC>;
        layers = <0 1 2 3>;
    };
    combo3_rbrc {
        timeout-ms = <50>;
        key-positions = <16 17 18>;
        bindings = <&kp RBRC>;
        layers = <0 1 2 3>;
    };
    combo3_lbrc {
        timeout-ms = <50>;
        key-positions = <17 18 19>;
        bindings = <&kp LBRC>;
        layers = <0 1 2 3>;
    };
    
    combo3_ampersand_rhs {
        timeout-ms = <50>;
        key-positions = <25 26 27>;
        bindings = <&kp AMPERSAND>;
        layers = <0 1 2 3>;
    };
    combo3_rbkt_rhs {
        timeout-ms = <50>;
        key-positions = <26 27 28>;
        bindings = <&kp RBKT>;
        layers = <0 1 2 3>;
    };
    combo3_lbkt_rhs {
        timeout-ms = <50>;
        key-positions = <27 28 29>;
        bindings = <&kp LBKT>;
        layers = <0 1 2 3>;
    };

    // RHS 4-key combos
    combo4_up {
        timeout-ms = <50>;
        key-positions = <5 6 7 8>;
        bindings = <&kp UP>;
        layers = <0 1 2 3>;
    };
    combo4_down {
        timeout-ms = <50>;
        key-positions = <6 7 8 9>;
        bindings = <&kp DOWN>;
        layers = <0 1 2 3>;
    };
    
    combo4_home_rhs {
        timeout-ms = <50>;
        key-positions = <15 16 17 18>;
        bindings = <&kp HOME>;
        layers = <0 1 2 3>;
    };  
    combo4_end_rhs {
        timeout-ms = <50>;
        key-positions = <16 17 18 19>;
        bindings = <&kp END>;
        layers = <0 1 2 3>;
    };

    combo4_pgup {
        timeout-ms = <50>;
        key-positions = <25 26 27 28>;
        bindings = <&kp PGUP>;
        layers = <0 1 2 3>;
    };  
    combo4_pgdn {
        timeout-ms = <50>;
        key-positions = <26 27 28 29>;
        bindings = <&kp PGDN>;
        layers = <0 1 2 3>;
    };

  };

};

        keymap {
                compatible = "zmk,keymap";

                default_layer {
                        label = "COLEDUST";
// -----------------------------------------------------------------------------------------
// |  Z  |  W  |  F  |  P  |  B     |     J  |  L  |  U  |  Y  |  Q  |
// |  A  |  R  |  S  |  T  |  G     |     M  |  N  |  E  |  I  |  O  |
// |  '  |  X  |  C  |  D  |  K     |     V  |  H  |  /  |  .  |  ,  |
//             | CTL |2/SPC|1/TAB   |   1/ENT| SFT | ALT |
                        bindings = <
   &kp Z      &kp W      &kp F       &kp P       &kp B   &kp J &kp L       &kp U        &kp Y       &kp Q
   &kp A      &kp R      &kp S       &kp T       &kp G   &kp M &kp N       &kp E        &kp I       &kp O
   &kp APOS   &kp X      &kp C       &kp D       &kp K   &kp V &kp H       &kp SLASH    &kp DOT     &kp COMMA
              &sk LCTRL  &lt 1 SPACE &lt 3 TAB                 &lt 2 ENTER &sk RSHFT    &sk RALT
                        >;
                };

                nav_layer {
                        label = "NAV";
// -----------------------------------------------------------------------------------------
// | MUTE| PGDN| PGUP| PLAY|ENTER|  *   | HOME | PGUP | PGDN | END  |
// | INS | RET | TAB | ESC | DEL | BSPC | LEFT |  UP  | DOWN | RIGHT|
// | UNDO| CUT | COPY|PASTE|CTL+K|  \   |  =   |      |      |      |
//             |     |     |     |      |      |      |
                        bindings = <
   &kp C_MUTE    &kp PG_DN    &kp PG_UP     &kp C_PP       &kp ENTER  &kp F12   &kp HOME    &kp PG_UP    &kp PG_DN &kp END
   &hm LALT INS  &hm LGUI RET &hm LSHFT TAB &hm LCTRL ESC  &kp DEL    &kp BSPC  &kp LEFT    &kp UP       &kp DOWN  &kp RIGHT
   &kp LC(Z)     &kp LC(X)    &kp LC(C)     &kp LC(V)      &kp LC(K)  &kp BSLH  &kp EQUAL   &trans       &trans    &trans
                 &trans       &trans        &kp TAB                             &lt 2 ENTER &lt 4 SPACE  &sk RSHFT
                        >;
                };

                num_layer {
                        label = "NUMBER";
// -----------------------------------------------------------------------------------------
// |  7  |  5  |  3  |  1  |  9  |  8  |  0  |  2  |  4  |  6  |
// |  (  |  [  |  ]  |  )  | DEL | BSPC|  }  |  :  |  _  |  {  |
// |  '  |  <  |  >  |  "  |  `  |  \  |  =  |  /  |  .  |  ,  |
//             |     |     |     |     |     |     |
                        bindings = <
   &kp N7        &kp N5        &kp N3         &kp N1         &kp N9      &kp N8    &kp N0          &kp N2           &kp N4         &kp N6
   &hm LALT LPAR &hm LGUI LBKT &hm LSHFT RBKT &hm LCTRL RPAR &kp DEL     &kp BSPC  &hm RCTRL RBRC  &hm RSHFT SEMI   &hm RGUI MINUS &hm RALT LBRC
   &kp APOS      &kp LT        &kp GT         &kp DQT        &kp GRAVE   &kp BSLH  &kp EQUAL       &trans           &trans         &trans
                 &trans        &kp SPACE      &kp TAB                              &kp ENTER       &trans           &trans
                         >;
                };

                sym_layer {
                        label = "SYMBOL";
// -----------------------------------------------------------------------------------------
// |  &  |  %  |  #  |  !  |ENTER|  *  |  ?  |  @  |  $  |  ^  |
// |  (  |  [  |  ]  |  )  | DEL | BSPC|  }  |  ;  |  -  |  {  |
// |  '  |  <  |  >  |  "  |  `  |  \  |  =  |  /  |  .  |  ,  |
//             |     |     |     |     |     |     |
                        bindings = <
   &kp AMPERSAND &kp PERCENT   &kp HASH       &kp EXCL       &kp ENTER   &kp STAR  &kp QUESTION    &kp AT_SIGN      &kp DOLLAR     &kp CARET
   &hm LALT LPAR &hm LGUI LBKT &hm LSHFT RBKT &hm LCTRL RPAR &kp DEL     &kp BSPC  &hm RCTRL RBRC  &hm RSHFT SEMI   &hm RGUI MINUS &hm RALT LBRC
   &kp APOS      &kp LT        &kp GT         &kp DQT        &kp GRAVE   &kp BSLH  &kp EQUAL       &trans           &trans         &trans
                 &trans        &trans         &kp TAB                              &kp ENTER       &kp SPACE        &trans
                        >;
                };

                utl_layer {
                        label = "UTIL";
// -----------------------------------------------------------------------------------------
// | MUTE| PREV| NEXT| PLAY | F11 |  F12 |CPSLCK|VOL_UP|VOL_DN|K_LOCK|
// | F7  | F5  | F3  | F1   | F9  |  F8  |  F10 |  F2  |  F4  |  F6  |
// | BACK| DOWN| UP  | FWD  | ??? | BTCLR|  BT0 |  BT1 |  BT2 |  BT3 |
//             |     |      |     |      |      |      |
                        bindings = <
   &kp C_MUTE   &kp C_PREV        &kp C_NEXT      &kp C_PP      &kp F11         &kp F12    &kp CAPSLOCK    &kp C_VOL_UP    &kp C_VOL_DN   &kp K_LOCK
   &hm LALT F7  &hm LGUI F5       &hm LSHFT F3    &hm LCTRL F1  &kp F9          &kp F8     &hm RCTRL F10   &hm RSHFT F2    &hm RGUI F4    &hm RALT F6
   &kp K_BACK   &kp K_SCROLL_DOWN &kp K_SCROLL_UP &kp K_FORWARD &kp C_AC_SEARCH &bt BT_CLR &bt BT_SEL 0    &bt BT_SEL 1    &bt BT_SEL 2   &bt BT_SEL 3
                &trans            &trans          &kp TAB                                  &kp ENTER       &trans          &trans
                        >;
                };
                
    };
};
